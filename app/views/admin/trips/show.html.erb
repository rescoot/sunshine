<div>
  <div class="sm:flex sm:items-center justify-between">
    <div class="sm:flex-auto">
      <h1 class="text-2xl font-semibold leading-6 text-gray-900"><%= t('admin.trips.show.title') %></h1>
      <p class="mt-2 text-sm text-gray-700">
        <%= t('admin.trips.show.subtitle', id: @trip.id, date: @trip.started_at.strftime("%B %d, %Y"), scooter: @trip.scooter.name) %>
      </p>
    </div>
    <div class="mt-4 sm:mt-0 flex items-center gap-4">
      <%= link_to t('admin.trips.show.edit'), edit_admin_trip_path(@trip), class: "btn-secondary" %>
      <%= link_to t('admin.trips.show.reassign'), reassign_admin_trip_path(@trip), class: "btn-secondary" %>
      <%= link_to t('admin.trips.show.back_to_trips'), admin_trips_path, class: "btn-secondary" %>
    </div>
  </div>

  <!-- Map Section -->
  <div class="mt-8 card">
    <% if @trip.has_gps_coordinates? %>
      <div class="relative">
        <div id="map" class="h-96 w-full rounded-lg"></div>
        
        <!-- Speed Legend -->
        <div class="absolute top-4 right-4 bg-white p-2 rounded-md shadow-md z-[1000]">
          <div class="flex items-center justify-between space-x-4 mb-1">
            <span class="text-xs"><%= t('admin.trips.show.zero_kmh') %></span>
            <span class="text-xs"><%= t('admin.trips.show.sixty_kmh') %></span>
          </div>
          <div class="h-4 w-32 rounded-sm" style="background: linear-gradient(to right, #4a1d7d, #7a3d93, #ba4a80, #e47e7e, #f4c28f);"></div>
        </div>
      </div>
    <% else %>
      <div class="h-96 w-full rounded-lg flex items-center justify-center bg-gray-100">
        <div class="text-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 20l-5.447-2.724A1 1 0 013 16.382V5.618a1 1 0 011.447-.894L9 7m0 13l6-3m-6 3V7m6 10l4.553 2.276A1 1 0 0021 18.382V7.618a1 1 0 00-.553-.894L15 4m0 13V4m0 0L9 7" />
          </svg>
          <h3 class="mt-2 text-sm font-medium text-gray-900"><%= t('admin.trips.show.no_gps_data') %></h3>
          <p class="mt-1 text-sm text-gray-500"><%= t('admin.trips.show.no_valid_coordinates') %></p>
        </div>
      </div>
    <% end %>
  </div>

  <div class="mt-8 grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-4">
    <!-- Trip Stats -->
    <div class="card">
      <div class="p-6">
        <dt class="text-sm font-medium text-gray-500 truncate"><%= t('admin.trips.show.duration') %></dt>
        <dd class="mt-1 text-3xl font-semibold tracking-tight text-gray-900">
          <%= @trip.duration ? distance_of_time_in_words(@trip.duration) : t('admin.trips.show.in_progress') %>
        </dd>
      </div>
    </div>

    <div class="card">
      <div class="p-6">
        <dt class="text-sm font-medium text-gray-500 truncate"><%= t('admin.trips.show.distance') %></dt>
        <dd class="mt-1 text-3xl font-semibold tracking-tight text-gray-900">
          <%= number_with_precision(@trip.distance.to_f / 1000, precision: 2) %> km
        </dd>
      </div>
    </div>

    <div class="card">
      <div class="p-6">
        <dt class="text-sm font-medium text-gray-500 truncate"><%= t('admin.trips.show.average_speed') %></dt>
        <dd class="mt-1 text-3xl font-semibold tracking-tight text-gray-900">
          <%= number_with_precision(@trip.avg_speed, precision: 1) %> km/h
        </dd>
      </div>
    </div>

    <div class="card">
      <div class="p-6">
        <dt class="text-sm font-medium text-gray-500 truncate"><%= t('admin.trips.show.status') %></dt>
        <dd class="mt-1">
          <% if @trip.ended_at.nil? %>
            <span class="inline-flex items-center rounded-md bg-yellow-50 px-2 py-1 text-xs font-medium text-yellow-800 ring-1 ring-inset ring-yellow-600/20">
              <%= t('admin.trips.show.in_progress') %>
            </span>
          <% else %>
            <span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">
              <%= t('admin.trips.show.completed') %>
            </span>
          <% end %>
        </dd>
      </div>
    </div>
  </div>

  <!-- Trip Details -->
  <div class="mt-8">
    <div class="card">
      <div class="card-header">
        <h3 class="text-base font-semibold leading-6 text-gray-900">
          <%= t('admin.trips.show.detailed_information') %>
        </h3>
      </div>
      <div class="border-t border-gray-200">
        <dl>
          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.user') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= link_to @trip.user.email, admin_user_path(@trip.user), class: "text-indigo-600 hover:text-indigo-900" %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.scooter') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= link_to @trip.scooter.name, admin_scooter_path(@trip.scooter), class: "text-indigo-600 hover:text-indigo-900" %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.start_time') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= @trip.started_at.strftime("%B %d, %Y %H:%M:%S") %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.end_time') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= @trip.ended_at&.strftime("%B %d, %Y %H:%M:%S") || t('admin.trips.show.in_progress') %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.start_location') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <% if @trip.start_lat && @trip.start_lng %>
                <%= link_to "#{number_with_precision(@trip.start_lat, precision: 6)}, #{number_with_precision(@trip.start_lng, precision: 6)}", 
                    "https://www.openstreetmap.org/?mlat=#{@trip.start_lat}&mlon=#{@trip.start_lng}&zoom=16", 
                    target: "_blank", 
                    class: "text-indigo-600 hover:text-indigo-900 font-mono" %>
              <% else %>
                <%= t('admin.trips.show.no_gps_data_short') %>
              <% end %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.end_location') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <% if @trip.end_lat && @trip.end_lng %>
                <%= link_to "#{number_with_precision(@trip.end_lat, precision: 6)}, #{number_with_precision(@trip.end_lng, precision: 6)}", 
                    "https://www.openstreetmap.org/?mlat=#{@trip.end_lat}&mlon=#{@trip.end_lng}&zoom=16", 
                    target: "_blank", 
                    class: "text-indigo-600 hover:text-indigo-900 font-mono" %>
              <% else %>
                <%= t('admin.trips.show.no_gps_data_short') %>
              <% end %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.start_odometer') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= @trip.start_odometer ? "#{number_with_delimiter(@trip.start_odometer)} m" : "N/A" %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.end_odometer') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= @trip.end_odometer ? "#{number_with_delimiter(@trip.end_odometer)} m" : "N/A" %>
            </dd>
          </div>

          <div class="border-b border-gray-200 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.start_gps_distance') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= @trip.start_gps_distance ? "#{number_with_delimiter(@trip.start_gps_distance)} m" : "N/A" %>
            </dd>
          </div>

          <div class="px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
            <dt class="text-sm font-medium text-gray-500"><%= t('admin.trips.show.end_gps_distance') %></dt>
            <dd class="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">
              <%= @trip.end_gps_distance ? "#{number_with_delimiter(@trip.end_gps_distance)} m" : "N/A" %>
            </dd>
          </div>
        </dl>
      </div>
    </div>
  </div>

  <!-- Trip Segments -->
  <% if @trip.trip_segments.any? %>
    <div class="mt-8">
      <div class="card">
        <div class="card-header">
          <h3 class="text-base font-semibold leading-6 text-gray-900">
            Trip Segments (<%= @trip.trip_segments.count %>)
          </h3>
        </div>
        <div class="border-t border-gray-200">
          <table class="min-w-full divide-y divide-gray-300">
            <thead class="bg-gray-50">
              <tr>
                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Order</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Type</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Distance</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Speed</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Bearing</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">Start Location</th>
                <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold text-gray-900">End Location</th>
              </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 bg-white">
              <% @trip.trip_segments.ordered.each do |segment| %>
                <tr>
                  <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6">
                    <%= segment.segment_order + 1 %>
                  </td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <span class="inline-flex items-center rounded-md 
                      <%= case segment.segment_type
                          when 'straight' then 'bg-blue-50 text-blue-700 ring-blue-600/20'
                          when 'turn' then 'bg-orange-50 text-orange-700 ring-orange-600/20'
                          when 'sharp_turn' then 'bg-amber-50 text-amber-700 ring-amber-600/20'
                          when 'u_turn' then 'bg-red-50 text-red-700 ring-red-600/20'
                          when 'loop' then 'bg-purple-50 text-purple-700 ring-purple-600/20'
                          when 'winding' then 'bg-indigo-50 text-indigo-700 ring-indigo-600/20'
                          when 'connector' then 'bg-gray-50 text-gray-600 ring-gray-500/10'
                          else 'bg-gray-50 text-gray-600 ring-gray-500/10'
                          end %> 
                      px-2 py-1 text-xs font-medium ring-1 ring-inset">
                      <%= segment.segment_type.titleize %>
                    </span>
                  </td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <%= number_with_precision(segment.distance.to_f, precision: 0) %> m
                  </td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <span class="inline-flex items-center rounded-md 
                      <%= if segment.speed && segment.speed < 10
                            'bg-green-50 text-green-700 ring-green-600/20'
                          elsif segment.speed && segment.speed < 30
                            'bg-yellow-50 text-yellow-700 ring-yellow-600/20'
                          else
                            'bg-red-50 text-red-700 ring-red-600/20'
                          end %> 
                      px-2 py-1 text-xs font-medium ring-1 ring-inset">
                      <%= number_with_precision(segment.speed, precision: 1) || 0 %> km/h
                    </span>
                  </td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <% if segment.has_gps_coordinates? %>
                      <% bearing = Trip.calculate_bearing(segment.start_lat, segment.start_lng, segment.end_lat, segment.end_lng).round %>
                      <%= bearing %>° <%= ["N", "NE", "E", "SE", "S", "SW", "W", "NW", "N"][((bearing + 22.5) % 360) / 45] %>
                    <% else %>
                      N/A
                    <% end %>
                  </td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <% if segment.has_gps_coordinates? %>
                      <%= link_to "#{number_with_precision(segment.start_lat, precision: 6)}, #{number_with_precision(segment.start_lng, precision: 6)}", 
                          "https://www.openstreetmap.org/?mlat=#{segment.start_lat}&mlon=#{segment.start_lng}&zoom=16", 
                          target: "_blank", 
                          class: "text-indigo-600 hover:text-indigo-900 font-mono" %>
                    <% else %>
                      No GPS data
                    <% end %>
                  </td>
                  <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-500">
                    <% if segment.has_gps_coordinates? %>
                      <%= link_to "#{number_with_precision(segment.end_lat, precision: 6)}, #{number_with_precision(segment.end_lng, precision: 6)}", 
                          "https://www.openstreetmap.org/?mlat=#{segment.end_lat}&mlon=#{segment.end_lng}&zoom=16", 
                          target: "_blank", 
                          class: "text-indigo-600 hover:text-indigo-900 font-mono" %>
                    <% else %>
                      No GPS data
                    <% end %>
                  </td>
                </tr>
              <% end %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  <% end %>
</div>

<%= content_for :head do %>
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css"
     integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY="
     crossorigin=""/>
<% end %>

<!-- Include Leaflet directly in the body to ensure it's loaded during Turbo navigation -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"
   integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo="
   crossorigin=""></script>

<script>
// Define the map initialization function
function initMap() {
  // Check if map container exists before initializing
  const mapContainer = document.getElementById('map');
  if (!mapContainer) {
    console.log("Map container not found, skipping map initialization");
    return;
  }
  
  // Check if Leaflet is loaded
  if (typeof L === 'undefined') {
    console.log("Leaflet not loaded yet, retrying in 100ms");
    setTimeout(initMap, 100);
    return;
  }
  
  // Check if map is already initialized
  if (mapContainer._leaflet_id) {
    console.log("Map already initialized");
    return;
  }
  
  console.log("Initializing map");
  const map = L.map('map');
  
  // Use a more subdued map style for better trip visibility
  L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
    subdomains: 'abcd',
    maxZoom: 19
  }).addTo(map);

  // Custom start and end icons
  const startIcon = L.icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  });

  const endIcon = L.icon({
    iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
    shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41]
  });

  // Function to map speed to color in the custom palette
  function getSpeedColor(speed) {
    // Clamp speed between 0 and 60 km/h
    const clampedSpeed = Math.max(0, Math.min(60, speed));
    // Calculate the position in the palette (0 to 1)
    const position = clampedSpeed / 60;
    
    // Custom palette colors
    const colors = ["#4a1d7d", "#7a3d93", "#ba4a80", "#e47e7e", "#f4c28f"];
    
    // Linear interpolation between colors
    if (position === 1) return colors[colors.length - 1];
    
    const index = position * (colors.length - 1);
    const lowerIndex = Math.floor(index);
    const upperIndex = Math.ceil(index);
    
    // If we're exactly on a color, return it
    if (lowerIndex === upperIndex) return colors[lowerIndex];
    
    // Otherwise, interpolate between the two closest colors
    const t = index - lowerIndex; // Fractional part
    
    // Parse the hex colors to RGB
    const lowerColor = hexToRgb(colors[lowerIndex]);
    const upperColor = hexToRgb(colors[upperIndex]);
    
    // Interpolate between the RGB values
    const r = Math.round(lowerColor.r + t * (upperColor.r - lowerColor.r));
    const g = Math.round(lowerColor.g + t * (upperColor.g - lowerColor.g));
    const b = Math.round(lowerColor.b + t * (upperColor.b - lowerColor.b));
    
    // Convert back to hex
    return rgbToHex(r, g, b);
  }
  
  // Helper function to convert hex to RGB
  function hexToRgb(hex) {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  }
  
  // Helper function to convert RGB to hex
  function rgbToHex(r, g, b) {
    return "#" + ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
  }

  <% if @trip.has_gps_coordinates? %>
    // Add start marker with custom icon
    const startMarker = L.marker([<%= @trip.start_lat %>, <%= @trip.start_lng %>], {icon: startIcon})
      .addTo(map)
      .bindPopup('Start');

    <% if @trip.end_lat && @trip.end_lng %>
      // Add end marker with custom icon
      const endMarker = L.marker([<%= @trip.end_lat %>, <%= @trip.end_lng %>], {icon: endIcon})
        .addTo(map)
        .bindPopup('End');

      // Create bounds to fit all markers
      const bounds = L.latLngBounds([
        [<%= @trip.start_lat %>, <%= @trip.start_lng %>]
      ]);
      bounds.extend([<%= @trip.end_lat %>, <%= @trip.end_lng %>]);

      <% if @trip.trip_segments.any? %>
        // Create a continuous path from all segments
        const tripCoordinates = [];
        <% @trip.trip_segments.ordered.each do |segment| %>
          <% if segment.has_gps_coordinates? %>
            // Add segment start point to the path
            tripCoordinates.push([<%= segment.start_lat %>, <%= segment.start_lng %>]);
            
            // Add segment points to bounds
            bounds.extend([<%= segment.start_lat %>, <%= segment.start_lng %>]);
            
            // If this is the last segment, also add its end point
            <% if segment == @trip.trip_segments.ordered.last %>
              tripCoordinates.push([<%= segment.end_lat %>, <%= segment.end_lng %>]);
              bounds.extend([<%= segment.end_lat %>, <%= segment.end_lng %>]);
            <% end %>
          <% end %>
        <% end %>
        
        // // Create the trip path
        // const tripPath = L.polyline(tripCoordinates, {
        //   color: '#3b82f6',
        //   weight: 5,
        //   opacity: 0.8,
        //   lineCap: 'round',
        //   lineJoin: 'round'
        // }).addTo(map);
        
        // Add individual segment paths with speed-based coloring
        <% @trip.trip_segments.ordered.each_with_index do |segment, index| %>
          <% if segment.has_gps_coordinates? %>
            // Add segment path with color based on speed
            const segment<%= index %>Path = L.polyline([
              [<%= segment.start_lat %>, <%= segment.start_lng %>],
              [<%= segment.end_lat %>, <%= segment.end_lng %>]
            ], {
              color: getSpeedColor(<%= segment.speed || 0 %>),
              weight: 4,
              opacity: 0.8,
              lineCap: 'round',
              lineJoin: 'round'
            }).addTo(map);
            
            // Add popup with segment info
            segment<%= index %>Path.bindPopup(
              'Segment <%= index + 1 %><br>' +
              'Type: <%= segment.segment_type.titleize %><br>' +
              'Speed: <%= segment.speed %> km/h<br>' +
              'Distance: <%= (segment.distance / 1000.0).round(2) %> km'
            );
          <% end %>
        <% end %>
      <% else %>
        // If no segments, draw a simple line between start and end
        const tripPath = L.polyline([
          [<%= @trip.start_lat %>, <%= @trip.start_lng %>],
          [<%= @trip.end_lat %>, <%= @trip.end_lng %>]
        ], {
          color: '#3b82f6',
          weight: 5,
          opacity: 0.8,
          lineCap: 'round',
          lineJoin: 'round'
        }).addTo(map);
      <% end %>

      // Fit map to show all markers and paths
      map.fitBounds(bounds, { padding: [50, 50] });
    <% else %>
      // If no end point, center on start point
      map.setView([<%= @trip.start_lat %>, <%= @trip.start_lng %>], 15);
    <% end %>
  <% end %>
}

// Initialize map after the page has fully loaded
document.addEventListener('DOMContentLoaded', function() {
  setTimeout(initMap, 10);
});

// Initialize map after Turbo navigation
document.addEventListener('turbo:render', function() {
  // Wait a bit longer after Turbo navigation to ensure everything is loaded
  setTimeout(initMap, 100);
});
</script>
