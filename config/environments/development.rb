require "active_support/core_ext/integer/time"

Rails.application.configure do
  # Settings specified here will take precedence over those in config/application.rb.

  # Make code changes take effect immediately without server restart.
  config.enable_reloading = true

  # Do not eager load code on boot.
  config.eager_load = false

  # Show full error reports.
  config.consider_all_requests_local = true

  # Enable server timing.
  config.server_timing = true

  # Enable static file server
  config.public_file_server.enabled = true

  # Enable/disable Action Controller caching. By default Action Controller caching is disabled.
  # Run rails dev:cache to toggle Action Controller caching.
  if Rails.root.join("tmp/caching-dev.txt").exist?
    config.action_controller.perform_caching = true
    config.action_controller.enable_fragment_cache_logging = true
    config.public_file_server.headers = { "cache-control" => "public, max-age=#{2.days.to_i}" }
  else
    config.action_controller.perform_caching = false
  end

  # Change to :null_store to avoid any caching.
  config.cache_store = :memory_store

  # Print deprecation notices to the Rails logger.
  config.active_support.deprecation = :log

  # Raise an error on page load if there are pending migrations.
  config.active_record.migration_error = :page_load

  # Highlight code that triggered database queries in logs.
  config.active_record.verbose_query_logs = true

  # Append comments with runtime information tags to SQL queries in logs.
  config.active_record.query_log_tags_enabled = true

  # Raises error for missing translations.
  config.i18n.raise_on_missing_translations = true

  # Annotate rendered view with file names.
  config.action_view.annotate_rendered_view_with_filenames = true

  # Raise error when a before_action's only/except options reference missing actions.
  config.action_controller.raise_on_missing_callback_actions = true

  # Apply autocorrection by RuboCop to files generated by `bin/rails generate`.
  config.generators.apply_rubocop_autocorrect_after_generate!

  # config.action_cable.url = "ws://localhost:3000/api/v1/ws"
  config.action_cable.url = "ws://localhost:3000/cable"
  config.action_cable.allowed_request_origins = [ /http:\/\/*/, /https:\/\/*/, nil ]

  config.thread_logging = true

  config.active_job.queue_adapter = :solid_queue
  config.solid_queue.connects_to = { database: { writing: :queue } }

  config.action_mailer.delivery_method = :smtp
  config.action_mailer.smtp_settings = {
    address: ENV.fetch("SMTP_ADDRESS", "mail.rescoot.org"),
    port: ENV.fetch("SMTP_PORT", 587).to_i,
    domain: ENV.fetch("SMTP_DOMAIN", "rescoot.org"),
    user_name: ENV.fetch("SMTP_USERNAME", "rescoot"),
    password: ENV.fetch("SMTP_PASSWORD", ""),
    authentication: ENV.fetch("SMTP_AUTH", "plain").to_sym,
    enable_starttls: ENV.fetch("SMTP_STARTTLS", "true") == "true"
  }
  config.action_mailer.default_options = { from: ENV.fetch("MAILER_SENDER", "mail@rescoot.org") }
  config.action_mailer.default_url_options = {
    host: ENV.fetch("ACTION_MAILER_DEFAULT_URL", "http://localhost:3000")
  }

  # Store files locally.
  config.active_storage.service = :local
end
